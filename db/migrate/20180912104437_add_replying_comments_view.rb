class AddReplyingCommentsView < ActiveRecord::Migration[5.2]
  def change
  	  create_view "replying_comments",  sql_definition: <<-SQL
  	select read_ribbons.user_id AS user_id,comments.id AS comment_id,read_ribbons.story_id AS story_id,comments.parent_comment_id AS parent_comment_id,comments.created_at AS comment_created_at,parent_comments.user_id AS parent_comment_author_id,comments.user_id AS comment_author_id,stories.user_id AS story_author_id,(read_ribbons.updated_at < comments.created_at) AS is_unread,(select votes.vote from votes where ((votes.user_id = read_ribbons.user_id) and (votes.comment_id = comments.id))) AS current_vote_vote,(select votes.reason from votes where ((votes.user_id = read_ribbons.user_id) and (votes.comment_id = comments.id))) AS current_vote_reason from (((read_ribbons join comments on((comments.story_id = read_ribbons.story_id))) join stories on((stories.id = comments.story_id))) left join comments parent_comments on((parent_comments.id = comments.parent_comment_id))) where ((read_ribbons.is_following = true) and (comments.user_id <> read_ribbons.user_id) and (comments.is_deleted = false) and (comments.is_moderated = false) and ((parent_comments.user_id = read_ribbons.user_id) or ((parent_comments.user_id is null) and (stories.user_id = read_ribbons.user_id))) and ((comments.upvotes - comments.downvotes) >= 0) and ((parent_comments.id is null) or ((parent_comments.upvotes - parent_comments.downvotes) >= 0)) and ((stories.upvotes - stories.downvotes) >= 0))
  	SQL
  end
end
